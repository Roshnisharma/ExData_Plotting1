if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
2.cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
2.cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
a<-matrix(1:9,3,3)
a
cmatrix<- makeCacheMatrix(a)
a$get()
cmatrix$get()
cmatrix$set(matrix(9:1,3,3))
cmatrix$get()
acheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cachesolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(a)
cacheSolve(cmatrix)
a<-matrix(1:9,3,3)
a
cmatrix<- makeCacheMatrix(a)
cmatrix$get()
cacheSolve(cmatrix)
cacheSolve <- function(x, ...) {
m <- x$getinv()
print m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(cmatrix)
cmatrix$get()
solve(cmatrix)
a<-matrix(1:4,2,2)
cmatrix<- makeCacheMatrix(a)
cmatrix$get()
cacheSolve(cmatrix)
## write a pair of functions that cache the inverse of a matrix.
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##1.set the value of the matrix
##2.get the value of the matrix
##3.set the value of the inverse matrix
##4.get the value of the inverse matrix
## set and get value of matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## to calculate inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
git remote add origin https://github.com/RoshniSharma/ProgrammingAssignment2
git status
## This function inverts the matrix
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(z) {
x <<- z
inver <<- NULL
}
get <- function() x
setInverse <- function(inverse) inver <<- inverse
getInverse <- function() inver
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This function returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inver <- NULL
if(!is.null(inver)) {
message("getting the cached data")
return(inver)
}
data <- x$get()
inver <- solve(data)
x$setInverse(inver)
inver
}
a<-matrix(1:4,2,2)
cmatrix<- makeCacheMatrix(a)
cacheSolve(cmatrix)
cmatrix$get()
cacheSolve(a)
cmatrix$get()
setwd("C:/Users/asus/Desktop/R/data")
data()
View(data)
names(data)
dir()
data<- read.table("tidydata.txt")
View(data)
data<- read.table("tidydata.txt", header = TRUE)
View(data)
names(data)
library("swirl")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col= blues9)
boxplot(ppm,col= "blue")
swirl()
abline(h=12)
hist(ppm)
hist(ppm, col="green")
rug(ppm)
rug(low)
hist(low)
low
high
hist(ppm,col= "green",breaks=100)
rug(ppm)
hist(ppm, col = "green")
abline( v= 12)
abline(v = 12, lwd=2)
abline(v = median(ppm),col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", string = "Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col= "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
east
head(east)
hist(pm25, col = "green")
hist(east$pm25,col="green")
hist(subset(pollution, region == "west")$pm25,col="green")
plot(pollution, region == "west")$pm25,col="green")
with(plot(pollution), region == "west")$pm25,col="green")
hist(plot(pollution$pm25,col="green")
)
hist(plot(pollution),col="green")
with(pollution, call(plot))
with("pollution"", call(plot))
)
with (pollution, plot(lattitude, pm25))
with (pollution, plot(latitude, pm25))
abline(12, lwd = 2, lty = 2)
abline(h =12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h =12, lwd = 2, lty = 2)
par(mfrow = c(1, 2),mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude (x-axis), west$pm25, main =="West")
plot(west$latitude, west$pm25, main =="West")
plot(west$latitude, west$pm25, main ="West")
plot(west$latitude, west$pm25, main ="east")
plot(east$latitude, east$pm25, main ="east")
plot(east$latitude, east$pm25, main = "East")
?Deices
?Devices
plot(faithful,plot(eruptions, waiting))
with(faithful,plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
title(main="Old Faithful Geyser data")
with(faithful,plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file.set="geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed,max(cars$dist),"SWIRL rules!" )
)
text(mean(cars$speed,max(cars$dist),"SWIRL rules!" ))
text(mean(cars$speed,max(cars$dist),""SWIRL rules!""n"" ))
text(mean(cars$speed,max(cars$dist),"n" ))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!" ))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!" )
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state,c(4,1))
xyplot(Life.Exp ~ Income | region,data= state,c(4,1))
xyplot(Life.Exp ~ Income | region,data= state,layout= c(4,1))
xyplot(Life.Exp ~ Income | region,data= state,layout= c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~MOnth, airquality)
boxplot(airquality$Ozone~airquality$MOnth, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab ="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab ="red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind~Ozone))
with(airquality, plot(Wind, Ozone))
with(main="Ozoneand Wind in New York City")
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set ="n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main= "Wind and Ozone in MYC")
title(main= "Wind and Ozone in NYC")
may = subset(airquality, airquality$Month==5)
may = subset(airquality, Month==5)
may <-subset(airquality, Month==5)
points(Wind,Ozone,pch = 24)
points(airquality$Wind,airquality$Ozone,pch = 24)
points(airquality$Wind,airquality$Ozone,pch = 17, col = "Blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, airquality$Month != 5)
notmay <- subset(airquality,Month != 5)
points(may$Wind,may$Ozone,col="red",pch=8)
points(notmay$Wind,may$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(v=median(airquality$Wind, lty=2))
abline(v=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind), lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd("C:/Users/asus/Desktop/R/data")
setwd("C:/Users/asus/ExData_Plotting1")
dir
dir()
git remote
txt
dir()
data <- read.csv("exdata_data_household_power_consumption.zip")
data <- read.table("exdata_data_household_power_consumption.zip")
data <- unzip(read.table("exdata_data_household_power_consumption.zip"))
View(data)
data <- unzip("exdata_data_household_power_consumption.zip")
View(data)
powerconsumption <- read.table(data)
View(powerconsumption)
?read.table
powerconsumption <- read.table(data, sep=";",header = TRUE)
powerconsumption$Date <- as.date(powerconsumption$Date)
powerconsumption$Date <- as.Date(powerconsumption$Date)
?strptime
powerconsumption$Date <- strptime(powerconsumption$Time, "%H:%M:%S"")
powerconsumption$Date <- strptime(powerconsumption$Time, "%H:%M:%S")
powerconsumption <- as.numeric(powerconsumption)
dim(powerconsumption)
powerconsumption <- read.table(data, sep=";",header = TRUE, skip= 66637,nrows=2880 )
# convert the Date and Time variables to Date/Time classes in R
powerconsumption$Date <- as.Date(powerconsumption$Date)
powerconsumption$Date <- strptime(powerconsumption$Time, "%H:%M:%S")
powerconsumption <- read.table(data, sep=";",header = TRUE )
# convert the Date and Time variables to Date/Time classes in R
powerconsumption$Date <- as.Date(powerconsumption$Date)
powerconsumption$Date <- strptime(powerconsumption$Time, "%H:%M:%S")
powerconsumption <- read.table(data, sep=";",header = TRUE )
# convert the Date and Time variables to Date/Time classes in R
powerconsumption$Date <- as.Date(powerconsumption$Date)
powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
owerconsumption$Date <- powerconsumption[(powerconsumption$Date == "2007-02-01"|powerconsumption$Date == "2007-02-02"),]
powerconsumption$Date <- powerconsumption[(powerconsumption$Date == "2007-02-01"|powerconsumption$Date == "2007-02-02"),]
powerconsumption <- read.table(data, sep=";",header = TRUE )
powerconsumption$Date <- as.Date(powerconsumption$Date, "%y-%m-%d")
?as.Date
powerconsumption$Date <- as.Date(powerconsumption$Date, "%y/%m/%d")
powerconsumption <- read.table(data, sep=";",header = TRUE )
powerconsumption$Date <- powerconsumption[(powerconsumption$Date == "2007-02-01"|powerconsumption$Date == "2007-02-02"),]
powerconsumption$Date <- as.Date(powerconsumption$Date, "%d/%m%/y")
powerconsumption <- read.table(data, sep=";",header = TRUE )
powerconsumption$Date <- as.Date(powerconsumption$Date, format="%d/%m/%y")
powerconsumption$Date <- powerconsumption[(powerconsumption$Date == "2007-02-01"|powerconsumption$Date == "2007-02-02"),]
powerconsumption<- subset(powerconsumption, powerconsumption$Date == "2007-02-01"| powerconsumption$Date=="2007-02-02")
powerconsumption <- read.table(data, sep=";",header = TRUE )
power$Date <- as.Date(power$Date, format="%y-%m-%d")
power <- powerconsumption
power$Date <- as.Date(power$Date, format="%y-%m-%d")
View(power)
power <- powerconsumption
power$Date <- as.Date(power$Date ,format = "%y-%m-%d")
power <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date ,format = "%y%m%d")
power <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date ,format = "%y/%m/%d")
power <- powerconsumption
power$Date <- as.Date(power$Date)
power<- subset(power, power$Date == "2007-02-01"| power$Date=="2007-02-02")
power <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date,"%y/%m/%d")
power<- subset(power, power$Date == "2007-02-01"| power$Date=="2007-02-02")
ower <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date,"%y/%m/%d")
?subset?
?subset
power <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date,"%y/%m/%d")
power<- subset(power, (power$Date == "2007-02-01"| power$Date=="2007-02-02")
)
power <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date,"%y/%m/%d")
power1<- subset(power, (power$Date == "2007-02-01"| power$Date=="2007-02-02"))
View(power1)
summary(power$Date)
Str(power$Date)
str(power$Date)
count(is.na(power$Date))
table(is.na(power$Date))
power1<- power[(power$Date == "2007-02-01"| power$Date=="2007-02-02"),]
table(which(power$Date="2007-02-01"))
which(power$Date="2007-02-01")
power1<- power[(power$Date == "2007-02-01")| (power$Date=="2007-02-02"),]
structure(power)
summary(power)
power2<- subset(power, power$Date=="2007-02-02")
View(power2)
power2<- subset(power, power$Date==c("2007-02-02"))
power1<- power[(power$Date == "2007-02-01"),]
power1<- power[(power$Date ="2007-02-01"),]
power1<- power[(power$Date=="2007-02-01"),]
power1<- power[(power$Date=="2007-02-01")|(power$Date=="2007-02-02"),]
table(power1$Date)
power1<- power[((power$Date=="2007-02-01")|(power$Date=="2007-02-02")),]
table(power1$Date)
table(power$Date)
power <- powerconsumption
table(power$Date)
power$Date <- as.Date(power$Date,"%y/%m/%d")
power1<- power[((power$Date=="2007-02-01")|(power$Date=="2007-02-02")),]
table(power1$Date)
power <- powerconsumption
#powerconsumption$Time <- strptime(powerconsumption$Time, "%H:%M:%S")
power$Date <- as.Date(power$Date,"%y/%m/%d")
power1<- power[((power$Date=="2007-02-01")|(power$Date=="2007-02-02")),]
power1<- power[((power$Date=="2007-02-01") | (power$Date=="2007-02-02")),]
power1<- power[(power$Date=="2007-02-01"),]
power1<- power[power$Date=="2007-02-01",]
class(power$Date)
power1<- power[(power$Date=="2007-02-01"),]
dir()
dir()
mk "README1.md"
touch "README.md"
pwd
pwd()
